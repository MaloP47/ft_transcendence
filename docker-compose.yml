version: '3.8'

services:
  django:
    container_name: django
    build: services/django/
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    volumes:
      - ./services/django/app:/code
      - logs_django:/var/log/django
    networks:
      - transcendence
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
      # rabbitmq:
      #   condition: service_healthy
    restart: unless-stopped

  # db:
  #   container_name: postgres
  #   image: postgres:alpine3.20
  #   volumes:
  #     - ./services/postgres/conf/postgresql.conf:/etc/postgresql/postgresql.conf
  #     - postgres_data:/var/lib/postgresql/data/
  #     # - logs_postgresql:/var/log/postgresql
  #     - ./services/postgres/logs:/var/log/postgresql
  #   networks:
  #     - transcendence
  #   expose:
  #     - "5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
  #     interval: 4s
  #     timeout: 2s
  #     retries: 5
  #     start_period: 2s
  #   env_file: .env
  #   restart: unless-stopped
  #   command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]

  db:
    container_name: postgres
    build:
      context: services/postgres
      dockerfile: Dockerfile
    # image: postgres:alpine3.20
    volumes:
      - ./services/postgres/conf/postgresql.conf:/etc/postgresql/postgresql.conf
      - postgres_data:/var/lib/postgresql/data/
      - logs_postgresql:/var/log/postgresql
      # - ./services/postgres/logs:/var/log/postgresql
    networks:
      - transcendence
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 4s
      timeout: 2s
      retries: 5
      start_period: 2s
    env_file: .env
    user: ${POSTGRES_USER}
    restart: unless-stopped
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]

  nginx:
    container_name: nginx
    build:
      context: services/nginx
      dockerfile: Dockerfile
    volumes:
      - ./services/nginx/conf:/etc/nginx/conf.d
      - logs_nginx:/var/log/nginx
    networks:
      - transcendence
    ports:
      - "1443:443"
      - "1080:80"
    depends_on:
      - django
      - grafana
    restart: unless-stopped

  # rabbitmq:
  #   container_name: rabbitmq
  #   image: rabbitmq:3.12.14-alpine
  #   volumes:
  #     - ./services/rabbitmq/conf/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
  #     - ./services/rabbitmq/conf/definitions.json:/etc/rabbitmq/definitions.json
  #     # - logs_rabbitmq:/var/log/rabbitmq/
  #   networks:
  #     - transcendence
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   healthcheck:
  #     test: ["CMD-SHELL", "rabbitmqctl status"]
  #     interval: 3s
  #     timeout: 1s
  #     retries: 10
  #     start_period: 2s
  #   restart: unless-stopped

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.53.0
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=24h
    ports:
      - "9090:9090"
    volumes:
      - ./services/prometheus/conf/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./services/prometheus/conf/alerts.rules.yml:/etc/prometheus/alerts.rules.yml
    networks:
      - transcendence
    restart: unless-stopped

  grafana:
    container_name: grafana
    image: grafana/grafana:11.1.0
    networks:
      - transcendence
    ports:
      - "3000:3000"
    volumes:
      - ./services/grafana/conf/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./services/grafana/conf/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./services/grafana/conf/dashboards:/etc/grafana/provisioning/dashboards
      - ./services/grafana/conf/grafana.ini:/etc/grafana/grafana.ini
      - ./services/grafana/conf/notification.yml:/etc/grafana/provisioning/alerting/notification.yml
    env_file: .env
    restart: unless-stopped

  postgres-exporter:
    container_name: postgres-exporter
    image: prometheuscommunity/postgres-exporter:v0.15.0
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable"
      CONFIG_FILE: /etc/postgres_exporter/postgres_exporter.yml
    volumes:
      - ./services/postgres_exporter/conf/postgres_exporter.yml:/postgres_exporter.yml
    ports:
      - "9187:9187"
    networks:
      - transcendence
    depends_on:
      - db
    restart: unless-stopped

  nginx-exporter:
    container_name: nginx-exporter
    image: nginx/nginx-prometheus-exporter:1.2.0
    command: [  "--nginx.scrape-uri", "https://nginx:443/stub_status",
                "--no-nginx.ssl-verify",
                "--nginx.timeout=1s"]
    networks:
      - transcendence
    ports:
      - "9113:9113"
    restart: unless-stopped

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:v0.27.0
    volumes:
      - ./services/alertmanager/conf/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - transcendence
    ports:
      - '9093:9093'
    restart: unless-stopped

  discord-alerts:
    image: benjojo/alertmanager-discord:latest
    container_name: discord-alerts
    restart: unless-stopped
    ports:
      - 9094:9094
    env_file: .env
    networks:
      - transcendence

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./services/elasticsearch/conf/init_elasticsearch.sh:/usr/share/elasticsearch/init_elasticsearch.sh
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - transcendence
    restart: unless-stopped
    user: "1000:1000"
    command: ["sh", "-c", "/usr/share/elasticsearch/bin/elasticsearch && /usr/share/elasticsearch/init_elasticsearch.sh"]

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.10
    container_name: logstash
    volumes:
      - ./services/logstash/conf/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - transcendence
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    # image: docker.elastic.co/kibana/kibana:7.17.10
    build:
      context: services/kibana
      dockerfile: Dockerfile
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - kibana_data:/usr/share/kibana/data
      # - ./services/kibana/conf/import_dashboards.sh:/usr/share/kibana/import_dashboards.sh
      # - ./services/kibana/conf/dashboards.ndjson:/usr/share/kibana/config/dashboards.ndjson
      - ./services/kibana/conf/dashboard.json:/usr/share/kibana/dashboard.json
    networks:
      - transcendence
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601"]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    # restart: unless-stopped
    # entrypoint: ["/bin/bash", "-c", "/usr/share/kibana/import_dashboards.sh"]


  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.10
    container_name: filebeat
    volumes:
      - ./services/filebeat/conf/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - logs_nginx:/var/log/nginx
      # - ./services/postgres/logs:/var/log/postgresql
      - logs_postgresql:/var/log/postgresql
      - logs_django:/var/log/django

    networks:
      - transcendence
    depends_on:
      - logstash
    restart: unless-stopped

volumes:
  postgres_data:
  grafana_data:
  prometheus_data:
  elasticsearch_data:
  kibana_data:
    # driver: local
    # driver_opts:
    #   type: 'none'
    #   o: 'bind'
    #   device: '/path/to/your/data'
    #   size: '5G'
  logs_django:
  logs_nginx:
  logs_postgresql:
  # logs_rabbitmq:

networks:
  transcendence:
