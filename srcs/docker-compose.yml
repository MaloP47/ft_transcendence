version: '3'

services:
  django:
    container_name: django
    build: ./requirements/django/
    expose:
      - "8000"
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    volumes:
      - ./requirements/django/app:/code
    networks:
      transcendence:
        aliases:
          - django
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy

  db:
    container_name: postgres
    image: postgres:16.3
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - transcendence
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    container_name: nginx
    ports:
      - "443:443"
      - "80:80"
    networks:
      transcendence:
        aliases:
          - nginx
    depends_on:
      - django
      - grafana
    build:
      context: requirements/nginx
      dockerfile: Dockerfile
    volumes:
      - ./requirements/nginx/conf.d:/etc/nginx/conf.d
    restart: on-failure

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - transcendence
    restart: on-failure

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=adminpassword
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./requirements/grafana/conf/grafana.ini:/etc/grafana/grafana.ini
    networks:
      - transcendence
    restart: on-failure

volumes:
  postgres_data:
  grafana_data:

networks:
  transcendence:
    driver: bridge
